[tool.poetry]
name = "gaitmap-challenges"
version = "0.1.0"
description = "A set of benchmark challenges for IMU based human gait analysis"
authors = ["Arne KÃ¼derle <arne.kuederle@fau.de>"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.8,<3.11"
pandas = ">=1.4.3"
scikit-learn = ">=1.0"
gaitmap = {git = "https://github.com/mad-lab-fau/gaitmap.git", rev = "master", extras = ["stats"]}
optuna = ">=3.0.0"
py-cpuinfo = "^9.0.0"
toml = "^0.10.2"
bokeh = {version = "^3.0.3", optional = true}
jupyter-bokeh = {version = "^3.0.5", optional = true}
gitpython = "^3.1.31"
gaitmap-datasets = {git = "https://github.com/mad-lab-fau/gaitmap-datasets"}

[tool.poetry.extras]
visualization = ["bokeh"]

[tool.poetry.group.dev.dependencies]
black = "^22.12.0"
poethepoet = "^0.16.5"
pytest = "^7.2.0"
pytest-cov = "^4.0.0"
ipykernel = "^6.19.2"
numpydoc = "^1.5.0"
Sphinx = "^5.3.0"
sphinx-gallery = "^0.11.1"
recommonmark = "^0.7.1"
memory-profiler = "^0.61.0"
matplotlib = "^3.6.2"
ruff = "^0.0.260"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120
exclude = '''
(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | docs
    | build
    | dist
    | \.virtual_documents
  )/
)
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 120
skip_gitignore = true


[tool.poe.tasks]
_format_black = "black ."
_format_ruff = "ruff . --fix-only --exit-zero"
format = ["_format_black", "_format_ruff", "_format_black"]
lint = { cmd = "ruff gaitmap_challenges --fix", help = "Lint all files with ruff." }
_lint_ci = "ruff gaitmap_challenges --format=github"
_check_black = "black . --check"
ci_check = { sequence = ["_check_black", "_lint_ci"], help = "Check all potential format and linting issues." }
test = { cmd = "pytest --cov=gaitmap-challenges --cov-report=term-missing --cov-report=xml", help = "Run Pytest with coverage." }
version = { script = "_tasks:task_update_version()" }
bump_dev = { script = "_tasks:task_bump_all_dev()" }
